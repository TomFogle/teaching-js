

Swimming Blooper “Welcome to our course”
Add livestream

We Taught My Mom to Code: Full Stack Web Development and Python3 for Absolute Beginners

What we offer:
 A professional tutor, paid to teach complex subjects in an efficient way; only kept on-staff when I provided direct results. I’ve helped countless children and adults hone their skills across a variety of subjects. I bring the same mindset to teaching computer science. 

If you think you can’t code, you can! This is the course for you.
Hi! Welcome to We Taught My Mom to Code: Full Stack Web Development and Python3 for Absolute Beginners, the only course you need to learn Full Stack and Python3. There are a ton of courses out there, but ours is the only one you’ll ever need.
Here’s why: 
This course was built from the ground up to teach a highly technical field to beginners and left-brainers. If you’re not sure if you can code, this is the course for you. 
This course is completely up-to-date and relevant in today’s job market. We teach only the most in-demand and versatile languages, preparing you for a wide variety of CS careers. 
I do a complete update and overhaul (including all-new videos, exercises, and resources) every 3 months to cover emerging frameworks and technologies. 
By the end of this course, you will have built two gigantic production applications: a full-service website and personalized web application. No other course walks you through the creation of something on this scale, made with only the most relevant tools. 
I include hours of videos specifically dedicated to the job search, networking, and coding interviews, in collaboration with business owners and professionals.  
You get to meet my Mom :)
This is a course designed to take you from zero coding experience to professional-level skills. If you’re more advanced, you can start at any lesson you’d like and follow along from there. Wherever you start, this is the only course you’ll ever need to learn Fullstack Web Development and Python 3
Throughout the course we cover tons of tools and technologies including:
HTML5
CSS3
JavaScript
Bootstrap 4
SemanticUI
DOM Manipulation
jQuery
Command Line Commands
NodeJS
NPM
ExpressJS
REST
MongoDB
Database Associations
Authentication
PassportJS
Authorization
Python 3
Flask
Django
IDK im just riffing

If you have any questions, I’m here to help. I designed this course to give you the coding education I wish I’d gotten at school and bootcamp.  Sign up today and see how accessible and rewarding coding can be. 
What you’ll learn
Make REAL web applications using cutting-edge technologies
Continue to learn and grow as a developer, long after the course ends
Create a blog application from scratch using Express, MongoDB, and Semantic UI
Create a complicated yelp-like application from scratch
Write your own browser-based game
Create static HTML and CSS portfolio sites and landing pages
Think like a developer. Become an expert at Googling code questions!
Create complex HTML forms with validations
Write web apps with full authentication
Use Bootstrap to create good-looking responsive layouts
Implement responsive navbars on websites
Use JavaScript variables, conditionals, loops, functions, arrays, and objects
Write Javascript functions, and understand scope and higher order functions
Create full-stack web applications from scratch
Manipulate the DOM with vanilla JS
Manipulate the DOM using jQuery
Translate between jQuery and vanillas JS
Write JavaScript based browser games
Use NodeJS to write server-side JavaScript
Write complex web apps with multiple models and data associations
Write a REAL application using everything in the course
Use Express and MongoDB to create full-stack JS applications
Use common JS data structures like Arrays and Objects
Master the command line interface
Use NPM to install all sorts of useful packages
Understand the ins and outs of HTTP requests
Create your own Node modules
Make a beautiful, responsive photographer's portfolio page
Create a beautiful, responsive landing page for a startup
Implement user authentication
Create a beautiful animated todo list application
Are there any course requirements or prerequisites?
Computer
Internet
Who this course is for:
This course is for anyone who wants to learn about web development, regardless of previous experience
It's perfect for complete beginners with zero experience
It's also great for anyone who does have some experience in a few of the technologies(like HTML and CSS) but not all
If you want to take ONE COURSE to learn everything you need to know about web development, take this course


Leo’s journey:

I spent months exploring online coding resources. What I found were out of date packages made by excellent coders with no practical teaching experience. The most popular Udemy bootcamps from months or years ago were patchwork constructions of updates, outtakes, and revisions. I felt like I was losing before I even started. 

Key concepts were taught incorrectly, pacing was strange, I relied heavily on prior knowledge and the help of my coder friends. We were also expected to do a ton of our own work outside the lesson parameters, not just as practice, but to actively teach ourselves things our teachers forgot. I had no understanding of how concepts fit together to make large-scale applications; projects were either overly hand-holdy or waaaay too big a skill gap between practice/lessons and solo work. We learned stuff that was out of date, then hastily amended in a course note that linked me to equally incomprehensible videos.

Tom’s journey:

At my elite university, the teaching sucked. Period. Save a couple professors, the courses were hard to follow, not comprehensive, and stressful due to their learn-the-whole-course-on-your-own nature. Some professors’ teaching was confusing, some said the wrong words at points where precision was critical, some couldn’t get into the minds of their students and help them navigate through the pitfalls of understanding the subject, and many of them didn’t care about teaching the class in the first place – they simply did so because they were forced to order to do their research. 


I went to Tom at my lowest point: one of the most popular Udemy bootcamps and two video series with hundreds of thousands of subscribers had failed to present for-loops in a way that made sense. I sat down with him for 30 mins and by the end of that time, I had learned it. 


This is a program designed from the ground up for people who… 


We are not necessarily the holy grail of courses. We are not the only good teachers out there. However, we collectively have tried many venues of learning code – university, scouring the internet for good video series, bootcamps, and other online courses. With what we have learned from those experiences, we put our heart and soul into teaching computer science a better way, and this course is the brainchild of our efforts and desire to make coding accessible to everyone.


Whether you’re frustrated with the needlessly time-consuming, sub-par, and largely impractical style of university teaching or a curious wanderer looking to dive into code and see what all the hype is about, this course will take you from the barebones of computer science to an advanced Python and Full Stack coder.

I spent four years getting a CS degree and realized I could have learned it much better with less stress and more practical skills while enjoying it more in one. Some high-end universities don’t even properly teach you how to use important tools Github or Command Line. I think that’s ridiculous.

The difference between us and university is:
– This course is taught in a way that doesn’t leave you in the dark about what you’re doing and leave out important concepts that will come back to bite you later.
– We introduce topics with intuitive phrasing and make coding jargon simple to understand instead of throwing that mountain of jargon at you with little to no explanation. None of these concepts are above you; they are just taught badly.
– You will have some small projects, big projects personalized to you, an extensive Github track record, practical skills, a thorough enough understanding of what you learn that you could teach it yourself, and, most importantly, a love for the subject instead of a deeply rooted hatred for it.
– We don’t mandate teaching topics that are not useful or interesting to you, and we don’t teach things in the wrong order (we think).
– This course was built by the same type of people as their target audience: a math & computer science graduate with an extensive teaching background who went through the wringer of bad and unfulfilling university learning, and a liberal arts student who wanted to learn how to code.

The Difference between us and bootcamps:
–– Learn at your own pace: No rushed, shoddy lessons and hours of playing catch-up. Watch our videos as many times as you need to for things to make sense. 
–– We give you the same material, taught better, for the cost of a video game. $59.99 or $20,000, you decide. We don’t have large offices in Manhattan to keep open and a crowded kitchen of 40 staff members on payroll, nor needlessly greedy wallets. We want to make coding more accessible to everyone since it’s here to stay and will only integrate itself more and more into our daily lives. We only ask for reasonable compensation for our efforts; we don’t believe in turning students into an overly-lucrative business.
–– Bootcamps focus on specific languages or tech stacks without really focusing on the core fundamentals. We teach you the core fundamentals that allow you to pivot quickly to any language or stack you desire
–– We don’t lure you in with misleading job statistics. Instead, we prepare you for every step of the interview process, from crafting a resume and updating your Github to networking and interview prep. 

Learn Fullstack and Python 3 by creating your own website and web application.



Reminder to both of us: we’re the only ones who will see this document for now. So, we don’t need to worry too much about our wording choices as long as we both understand ourselves. 

Reminder 2: We’re going to draw stuff!! Don’t worry if every description makes sense as written. As long as we can understand ourselves, we can teach it. 

Video notes: Sound is far, far more important than camera quality, especially since we’re doing a lot of screen-sharing/slides as opposed to videos of ourselves. We only really need videos of ourselves to a) introduce ourselves and b) introduce each new section. 

Throw in certificate upon completion of the course.



Lesson 1: Setup and Mindset
Video 1: Welcome and introduction.

Give my lil spiel about how coding is a skill anyone can learn (equating it to learning taxes, raising kids, etc.; “impossible”/seemingly difficult tasks that people still manage to learn). You’re learning how to harness the power of computers to complete tasks and build things; you don’t need to be some tech wizard with a math phD. Emphasize how computer science is a bunch of simple tools that combine to do some wild shit. 

Emphasize how computer science is a bunch of simple tools that combine to do some wild shit.
Emphasize the importance of specificity and being anal (compare it to checking grammar in an important email)
Talk about tech elitism and deliberate use of language to increase barrier-to-entry. Anyone can learn to code. Just learn the lingo and practice a decent amount. It’s a job like any other. (use metaphor for learning a foreign language; they’re not talking about anything that complicated, it’s just a different language.)
These concepts are fairly simple to grasp, but the real trick is reproducing them on demand/combining them. 
Don’t be afraid to google stuff. Real coders do it constantly. StackOverflow, stack exchange, MDN, Medium.
* Maybe a funny 10 second sketch remake of the popular “What people think coding is like vs what it’s actually like.” Leo and Tom hacker battling like “Aw fuck he broke into my main frame!! Oh yeah?!?! Well, take this!! DDoS attack!     ~GAHH!! How did he do that?!?! Well, I’ll have to use my secret weapon!! …”
Actuality: *squints at a list of IPs on screen. Slowly copies and pastes into Terminal and runs a command to ssh into another person’s machine. Make horse lip roll sound.
We organize all lessons as building up to a sicc project. Personal website, for instance?


Video 2:
Lesson Format:
why is this important, 
show them what the finished setup is going to look like (switching between coding and browser).
lesson with mini quizzes as they go, 
guided exercises, have a rote memorization for acronyms like HTML, as in tell them to get a pencil and paper and write out what the acronym is 5 times. Have a glossary of acronyms.
solo exercises, 
Guided walkthrough of solo exercises, 
Common screw up section, 
recap of lesson as last slide plus attached text file.

Guided download of Firefox, Sublime, iTerm/Linux terminal, anything else we can think of for a good coding environment, plus example PDF.

Have them run lil stuff for fun. 

HTML/CSS/Bootstrap Basics - Make it pretty!

So, we’ve just done cool stuff in our developer console. How can we show other people? Teach them how to “animate” their code. 

HTML: Raw website content. All the words, image links, everything. Show them all the basic heading and button options. 

CSS: Make it look presentable and easy for user to follow. Show them all the basic styling options. Color, size, font, margins, padding. 

Color, size, font, insert images, margins, padding, flexbox. 

JS: Make it functional. 

This lesson itself is a metaphor for frontend: html is like the raw written lesson plan and boring recitation, css is like the neat, cool video format in which we present it, JS is the 



Video 3:
Lesson 2: Binary: why should we care?
why is this important, lesson, guided exercises, solo exercises, explanation of solo exercises, recap of lesson w/notes PDF.

Why do we give a shit? Binary is important. We need to understand binary to understand concept x, y z. It is also featured in some job interviews. Taking 5 minutes to understand this concept will save us a lot of time and energy down the line

Before we get into the 1’s and 0’s of computer science, we need to understand the 1’s and 0’s. Humans like to count things in decimal, otherwise known as base 10. Computers count things in binary. At their core, they’re a massive mechanism that uses switches, they can be turned on, or they can be turned off. There are only 2 states a switch can be in, not 10, so we have to learn how to count like a computer.

To make this easier, let’s do a quick recap of how we count in decimal. This might seem pretty basic – hopefully you’ll think some of it’s cool – but it is important to think of numbers in the way I’m about to describe.

Decimal is called ‘base 10’ because we have 10 symbols that we can use for counting. We start at 0, then count one symbol at a time: 1, 2, 3, 4, 5, 6, 7, 8, 9. We call these ‘ones’ or ‘1s’.

That’s ten symbols. Instead of having symbols for every conceivable number (which would be beyond ridiculous), we simply count how many times we’ve cycled through these symbols. If we’re at 9 and want to count one more we seem to be stuck – what do we write? Well, we’ve gone through all ten symbols 0-9, so we can simply start over from 0 and keep track of the fact that we’ve gone through all our symbols once by putting a ‘1’ to the left of the 0:

    1 0

We now have two numbers on the page. Let’s call the rightmost number, the place where we’re counting by 1s, the “ones place” or “1’s place”.

We then can start counting again: 10, 11, 12, 13, 14, 15, 16, 17, 18, 19.
If we want to count one more, we’ve run out of symbols again. So, counting how many times we’ve gone through our ten symbols, we have now gone through them twice, so we add 1 to the number of times we’ve gone through the symbols, restart our count and write:

    2 0

Each time the number to the left of the place where we count by ‘1s’ goes up, it means that we’ve gone through all ten symbols. So each time the left number goes up, we’ve counted ten ones. The ‘2’ represents us having counted the ten symbols in the 1’s place ‘2’ times. We’ll call this place in our number the “tens place” or “10's place”.

This counting continues: 20, 21, …,  29, 30, and so on until we reach 99:

    … 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99.

If we want to add 1 more – well, we’ve gone through our symbols again, so we restart and add 1 to the number of times we’ve gone through them:

    9 0
+    1

But we’ve run out of symbols for counting how many times we’ve gone through our symbols. More simply put, we’ve run out of symbols for the 10’s place, which counts how many times we’ve gone through the 1’s place. To keep track of how many times we’ve gone through the 10’s place, we’ll follow what we did before and write a ‘1’ to the left of the 10’s place, and restart our count in the 10’s place:

1 0 0

We’ll call this the ‘hundreds place’ or ‘100s place’.

This continues indefinitely. The next place would be the “thousands (1,000’s) place” the “ten-thousands (10,000’s) place”, etc. The numbers in each place are called ‘digits’. Each place keeps track of the number of times the digit to its right has cycled through all ten symbols (0-9).

We could write 1 as 0001, and 2 as 0002. If we get to 0009 and count 1 more, we would write 0010. If we get to 0099 and count 1 more, we would write 0100. It may seem kind of silly to say, but this is going to be similar to how binary is written.

The key takeaway from this way of thinking is:
we have a certain number of symbols to count with
when we run out of symbols for a digit and try to count 1 more, we start over and increase the digit to its left by 1 to keep track of the fact that we’ve cycled through all the symbols for that digit.

Let’s say we didn’t have the symbols 8 or 9. Then we would only have the symbols 0-7. We would then count like this:

    0, 1, 2, 3, 4, 5, 6, 7,
10, 11, 12, 13, 14, 15, 16, 17,
20, 21, 22, 23, 24, 25, 26, 27,
30, 31, 32, 33, 34, 35, 36, 37,
…

In this case ‘10’ really only keeps track of 8 things. But in this number system, we only have 8 symbols, 0-7, so we can’t write 8. Therefore we have to write ‘10’ to represent what we would normally write in decimal as ‘8’.

The set of symbols we have at our disposal to use for counting is called a ‘base’. Hence, the symbols 0-9 is ‘base 10’ or ‘decimal’, because there are ten symbols. In the system without the symbols ‘8’ or ‘9’, we only have 8 symbols to count with (0-7). This system is called ‘base 8’ or ‘octal’.

We could keep reducing the size of our base. Say we only have 4 symbols – 0123. This is base 4. Counting in base 4 would look like this:

  0,   1,   2,   3,
10, 11, 12, 13,
20, 21, 22, 23,
30, 31, 32, 33, … 

As soon as we reach our limit of symbols for a digit, we increment the digit to its left and keep counting.

Alas, no one really uses octal. It is, however, useful to understand for comprehending what we’ll cover next, ‘base 2’ or ‘binary’.

Yup, base 2. Two symbols. 0 and 1. Not the most efficient system in the world for humans. For computers it’s a perfect match. 

Let’s try counting a little. I’ll put the binary and decimal equivalent side-by-side:

     Binary     Decimal
    (base 2)   (base 10)
          0           0            
          1           1    Out of symbols. Increment digit to left and restart
         10           2    New digit
         11           3    Out of symbols. 
        100           4    New digit. Increment digit to left and restart
        101           5    Out of symbols. 
        110           6
        111           7    Out of symbols.
       1000             8    New digit
       1001           9    Out of symbols
       1010          10


As with octal, as soon as we run out of symbols for a digit in binary, we increase the digit to the left of that digit by 1 to count that we’ve cycled through all our symbols (in this case just 0 and 1).

Let’s count again, this time in the same fashion as 0001, 0002, 0003, …:

       00000      0
       00001      1
       00010      2  –
       00011      3
       00100      4  –
       00101      5
       00110      6
       00111      7
       01000      8  –
       01001      9
       01010     10
       01011     11
       01100     12
       01101     13
       01110     14
       01111     15
       10000     16  –


Take note of what the binary for powers of 2 look like. They’re all a ‘1’ followed by only zeros:

20  =          12   =     110
21  =        102   =     210
22  =      1002   =     410
23  =    10002   =     810
24  =  100002   =   1610

The subscript ‘2’ (1002) means the number is in base 2. The subscript ‘10’ (810) means the number is in base 10.

This much like the powers of 10 in decimal:

100  =          110
101  =        1010
102  =      10010
103  =    100010
104  =  1000010

Where all the powers of 10 result in a ‘1’ followed by some number of zeros. Also note that a number like 1010110can be broken down into its powers of 10:

    1010110=1000010 + 0010010+ 0000110
 =104        + 102        + 100

This can help us figure out how much a binary number is worth in decimal. Let’s take the number 110012 for example:

    110012=100002 + 010002 + 000012
=24        + 23          + 20         = 16 + 8 + 1 = 25

Where the second row is in decimal. This shows how to figure out that110012=2510. Your computer stores the decimal numbers you type in binary, so on your screen you would type and see 25, but the computer will think of it as 11001.

We can also add and subtract the usual way we do in decimal too:

    Addition:

       carry     1   1   1       1
        0   1   0   1   0   12
     +  0   0   1   1   0   12
     ———————————————————————————
                 1   0   0   0   1   02


So 010101 + 001101 = 100010.


Subtraction:

                                 ↓
       borrow    
         1   0   0   1   0   12
     —  0   1   1   0   0   12
     ———————————————————————————
                            02

      -------------------------------------------
                                 ↓
       borrow    
                 1   0   0   1   0   12
     —  0   1   1   0   0   12
     ———————————————————————————
                        0   02

      -------------------------------------------
                             ↓
       borrow    
                 1   0   0   1   0   12
     —  0   1   1   0   0   12
     ———————————————————————————
                    1   0   02

-------------------------------------------
                         ↓
 borrow    
                 1   0   0   1   0   12
              —  0   1   1   0   0   12   need to borrow
     ———————————————————————————
                         ?   1   0   02

-------------------------------------------
                     ↓
 borrow         
                 1   0   0   1   0   12
     —  0   1   1   0   0   12   can’t borrow here
     ———————————————————————————
                         ?   1   0   02

-------------------------------------------
                 ↓ 
 borrow         
                 1   0   0   1   0   12
              —  0   1   1   0   0   12   can borrow here
              ———————————————————————————
                ?   1   0   02

-------------------------------------------
                    ↓
       borrow    0  10  
                 1   0   0   1   0   12
              —  0   1   1   0   0   12   need to borrow again
                 ———————————————————————————
                        ?   1   0   02

-------------------------------------------
                ↓
                     1
       borrow    0  10  10
                 1   0   0   1   0   12
              —  0   1   1   0   0   12   can subtract now
              ———————————————————————————
                         ?   1   0   02

-------------------------------------------
           ↓
                    1
       borrow   0  10  10
                1   0   0   1   0   12
             —  0   1   1   0   0   12
                ———————————————————————————
                        1   1   0   02

-------------------------------------------
                 ↓
            1
       borrow    0  10  10
        1   0   0   1   0   12
     —  0   1   1   0   0   12
     ———————————————————————————
            0   1   1   0   02

-------------------------------------------
        ↓
                     1
       borrow    0  10  10
        1   0   0   1   0   12
     —  0   1   1   0   0   12
     ———————————————————————————
        0   0   1   1   0   02


So 100101 — 011001 = 001100. You can try out the following problems if you want, or move on to hexadecimal. However, I recommend trying out some for yourself to get a feel for binary.

  001
+ 001
——————

  010
+ 101
——————

  011
+ 001
——————

  100101
+ 010111
—————————

  011101
+ 110101
—————————

  011
— 001
——————

  101
— 011
——————

  1000
— 0001
——————

  100110
— 010101
—————————

  101001
— 011010
—————————




Video 4: 
Why important, lesson,  guided exercises, solo exercises, explanation of solo exercises, recap of lesson w/notes PDF.
Now on to hexadecimal. Hex is base 16. We don’t have enough colloquially known symbols, as we only made up the number symbols 0-9. The symbols we chose instead of 10, 11, 12, 13, 14, and 15 are the first six letters of the alphabet, ABCDEF.

So counting in hex looks like this:

    00
    01
    02
    03
    04
    05
    06
    07
    08
    09
    0A
    0B
    0C
    0D
    0E
    0F
    10
    11
    12
    13
    14
    15
    16
    17
    18
    19
    1A
    1B
    1C
    1D
    1E
    1F
    20
    21
    22
    23
    ...

The convention for denoting that a number is hex is by putting a 0x in front, 0x6F4C for example. If you want, you can practice addition and subtraction with hex, though it’s not necessary. It’s far more important to get used to arithmetic with binary than hex. It is useful, some would say necessary, to understand what hex is and have a feel for it.

Show to convert between binary and hex

Video 5:
Why important, lesson, guided exercises, solo exercises, explanation of solo exercises, recap of lesson w/notes PDF.

What are computers and how do they work? – demystifying computer science.
Computers store information on a bunch of switches that can be flipped one way to mean “on” and the other way to mean “off”. Let’s say they’re organized in a straight line.

If you wanted to know if the 100th switch was on, it would go and check by sending an electrical pulse through it. If it comes out the other side, it is on, otherwise it’s off. We say ‘1’ means on and ‘0’ means off. We call this switch that is a 1 or 0 a ‘bit’.

This storage of 1’s and 0’s is called memory. It’s storing information, albeit very basic information. However, we can use this basic setup to accomplish a lot of things. The first bit will be called ‘bit 0’, the second ‘bit 1’, the third ‘bit 2’, etc.

Computers have names for these bits. Rather, for sections of these bits. They could have named every single bit and left it at that, but the better way to organize memory that everyone settled on is to group the bits into sections of 8, and have names for those sections. A group of 8 ‘bits’ is called a ‘byte’. Similar to before, the first byte in memory is ‘byte 0’, the second ‘byte 1’, and so on.

If you wanted to know if bit 54 is on or off (remember, this is the 55th bit), you would skip the first 6 bytes, bytes 0-5 (skip 48 bits, a.k.a bits 0-47), look at byte 6 (bits 48-55) and look at bit 6 (the 7th bit) in that byte. Skipping by groups of 8 bits and looking inside one of the groups later is a lot faster than going through one bit at a time. Hence, we have names for each ‘byte’, and inside each byte we name the 8 ‘bits’ 0-7.

The names for these bytes are simply hexadecimal numbers. Remember that hexadecimal has 16 number symbols, 0123456789abcdef. ‘10’ in hex is equivalent 


Video 6: 
Why important, lesson, guided exercises, solo exercises, explanation of solo exercises, recap of lesson w/notes PDF.
Lesson 3: Javascript basics, why javascript, saving stuff properly, proper developer environment. 

Javascript basics, why javascript, explain how all computing logic is similar so if you learn this one annoying language, the rest will be more straightforward.

We define things explicitly and precisely; they are no more and no less than what we say they are (barring very low-level irrelevant jargon). These tools are very simple and nothing more, but they can be used in convenient ways to accomplish various tasks.

A hammer and nails are basic tools, but you can combine them to build almost anything. 
A backpack is often used to carry stuff you’ll need at school – computers, food, textbooks, etc. You could carry a compass, 4 meals, 4 changes of clothes, and attach a sleeping bag for hiking.
You could also fill a backpack with bricks and do weighted pullups with it. 
You could even use other tools to cut an old backpack into pieces and make a costume.
With imagination and creativity, this simple tool can be used to do a wide variety of things beyond their most common uses. It’s just a sealed fabric with pockets and straps, but that’s enough to accomplish many things.

If the way you want to use something is possible and accomplishes your task, it’s fair game.

Video 7: 
Why important, lesson, guided exercises, solo exercises, explanation of solo exercises, recap of lesson w/notes PDF.

Razzle Dazzle/DevTools
Variables
Integers/Floats
Strings
Operators

Variables: spots in memory that you name and set to equal to chosen values
let myName = Leo;

Variables let us store values in small sections of computer memory. 

“Let” means that we’re telling the computer it’s about to store a value. The semicolon at the end means that this particular section of code is complete. 

Let’s say there’s a small section of computer memory the computer calls 0x001C5. Now that we’ve declared this variable, “Leo” is stored inside the section of memory called 0x001C5 and we can use “num” as slang for 0x001C5. It’s like someone named Robert Hubert Huffington Downey Smith III deciding to go by Rob to make everyone’s life easier.   

Every time we use myName, the computer knows to go into the memory section 0x001C5 and pull out whatever’s stored there; in this case, the word “Leo”. 

let myName = Leo is basically saying let 0x001C5 = myName = Leo

I can change this variable anytime I want to. Maybe I want myName to equal Tom. 

let myName = Tom;

Now, whenever the computer sees myName, it still goes into section 0x001C5, only this time, it finds “Tom” instead of “Leo”. 

0x001C5 = myName = Tom

We have everyone open developer console and give them stuff to do w variables

Open Developer console and type xyz variable then hit enter.
Now, change variable name to xys
Ints: integers
Computers are really, really good at doing things with numbers. So, we need to be able to input numbers. 

Floats: numbers with decimals
Sometimes numbers have decimals.

Strings: stuff in quotes, usually words
Computers are really good at organizing items in general. Sometimes those items are words. For example, “Leo” and “Tom.”  

chartAt() function.
Video 8: 
Why important, lesson, guided exercises, solo exercises, explanation of solo exercises, recap of lesson w/notes PDF.

Operators:
The 4 basics, plus modulo, and, or. Give people stuff to type. Add stuff, subtract stuff, etc. Explain PEMDAS. 
Make variable xyz
Make variable xyz
Now, add/subtract/multiply/divide/mod/and/or

Video 9: 
Why important, lesson, guided exercises, solo exercises, explanation of solo exercises, recap of lesson w/notes PDF.
Logical operators

Video 10: 
Why important, lesson, guided exercises, solo exercises, explanation of solo exercises, recap of lesson w/notes PDF.
If/Else if/Else:
Make the computer do different things under different circumstances. For example, if my name is Leo, say “hi leo”, but if my name is Tom, I want the computer to say “hi tom” and if my name isn’t Leo or Tom, I want the computer to say “Nice to meet you!”

Literally have them make this example

Video 11: 
Why important, lesson, guided exercises, solo exercises, explanation of solo exercises, recap of lesson w/notes PDF.
Arrays: ordered lists of ints, strings, objects, etc. 
We’ll talk about objects later; they’re cool.
Remember how computers are really good at organizing items in general? Arrays let you make ordered lists that can combine integers, floats, strings, and objects (which we’ll cover soon). For example, someone’s name, address, age, and favorite version of pi could make an array. 

leoInfo = [“Leo”, “123 Main Street”, 23, 3.14159];
tomInfo = [“Tom”, “456 Main Street”, 23, 3.14159265];

Array vs Set – Arrays have an order, sets don’t. Think of a person’s case of weekly meds, they’re in order, versus a basket full of names on papers. The first is an ordered list of pills, the second is a big set of loose slips of paper with no order to them.

Have them make an example array.
Video 12: 
Why important, lesson, guided exercises, solo exercises, explanation of solo exercises, recap of lesson w/notes PDF.
While loops: 
While a condition is true/false, code runs. If/when the condition changes, code stops. 

While my name is Leo, print out Leo’s info. Otherwise, print “hey, where’s Leo?”
Video 13: 
Why important, lesson, guided exercises, solo exercises, explanation of solo exercises, recap of lesson w/notes PDF.
For loops: 
glorified counting machines that (usually) run a given process n number of times

I want to print the word poop five times. I want to print every even number in this list. 

Video 14: 
Why important, lesson, guided exercises, solo exercises, explanation of solo exercises, recap of lesson w/notes PDF.

Functions: reusable chunks of code
condenses lots of code into a single thing that can be run again and again. 

Video 15: 
Why important, lesson, guided exercises, solo exercises, explanation of solo exercises, recap of lesson w/notes PDF.
Dictionaries (Called Objects):
Key-value data structures with instant lookup of value given a key...

If the key is one word, you don’t need quotes around the key. If it’s a multiple word key, you need double quotes “” (not single quotes! ‘’)

Challenge: make a game resembling candyland with a for loop. We will provide the array for them to use so they don’t have to bang their heads making one if they don’t want to.
Objects:
Things with given properties. Compare to cookies. All cookies have a shape and type. Aka round chocolate chip, sugar cookies shaped like Christmas trees, etc.  

Video 16: 
Why important, lesson, guided exercises, solo exercises, explanation of solo exercises, recap of lesson w/notes PDF.

Classes: 
Most common analogy is a cookie cutter and cookies. Tools that build objects. A cookie cutter makes it possible to assign cookies a shape.

A dog is an object that breathes, eats, and barks. A human is an object that breathes, eats, and talks.


Video 17/18: 
Why important, lesson, guided exercises, solo exercises, explanation of solo exercises, recap of lesson w/notes PDF.

Why is all this stuff important? How will it fit together eventually?

Checkpoint: We walk them through the apartments problem. Then, we have them do it from scratch.

If you can’t do this, do some review and come back to it. WE EXPECT THIS TO TAKE A FEW TRIES, SO NO RUSH!! It took me a few tries to understand these concepts the first time I learned! Show them how to outline their thinking in pseudo-code. 

Command Line Basics, why command line?- 
How to use command line, why it’s useful/why we’re teaching this. Help them push their stuff to git

Lesson w/explanation of why is this important to larger project, 
guided exercises, 
solo exercises, 
solo solution explanation, 
recap of lesson w/notes,
additional optional practice


-------------
Progress Check: 
If you can’t do this, do some review and come back to it. WE EXPECT THIS TO TAKE A FEW TRIES, SO NO RUSH!! It took me a few tries to understand these concepts the first time I learned!

Have them copy a simple frontend site we design, with buttons and other js stuff that perform different functions. We give them a basic black/white template and layout, then let them choose their own colors/images and such. 
-----------------
Slides:

Before we get into the 1’s and 0’s of computer science, we need to understand the 1’s and 0’s, which we call binary.

Why is this important?
Binary is the number system computers are built on. 
Knowing binary makes it easier to understand computers. 
Binary teaches us:
How computer memory works.
How computers store the letters and words you type.
How to store certain information so it takes up less memory.
And much more! But that’s for a few lessons down the road ;)

Lesson:
Relearning decimal
Counting in Octal and Quaternary
Counting in Binary
Figuring out the decimal value of a binary number
Figuring out the binary value of a decimal number
Addition in Binary
Subtraction in Binary
Hexadecimal
    
Mini-Quizzes:
-
-
-
-
-
-
guided exercises: 
solo exercises:
Guided walkthrough of solo exercises: 
Common screw up section: 
recap of lesson as last slide plus attached text file:

    HTML basics:
<!DOCTYPE html> — tell computer we are giving it html
<head> — metadata (information about the stuff on your page, i.e. data about your data, hence metadata). Here you tell what kind of characters you are typing in (english, chinese, etc.) though everyone uses utf-8 at this point, which is a massive collection of the entire world’s symbols so everything runs smoothly everywhere. You can title your webpage, style it, among other things too.
<body> — the meat and skeleton of your webpage. Your html and javascript go here. This tells the page the basic setup of what exists and how it should function. You could style things inline here too, though it is usually bad practice (inline meaning in the line of code you want the styling to apply too as opposed to in the <head> or a separate file where it would be all nice and organized and reusable). If you want to tell the page where things should go more specifically and what they should look like, you would do that in styling.
<style> — where you would tell the page where things should go more specifically and what they should look like. You should do this either in the <head> section of your html (not inline if you can avoid it), or, even better, in a separate file called a CSS file and then write a line of code inside your <head> that essentially says “put all this styling code here where I would have typed it.” The reason for this is it makes your html file less bulky and it makes it possible to reuse that styling in any file you want using the one line of code that says “insert this styling here please.” We’ll talk about styling/making things pretty after going over how to make things in the first place.
So what kind of things can we put in the <body> / on my webpage? We can put:
Heading – bigger text that’s usually used for things like titles (articles, movies, etc.) These tags come in sizes 1-6, with 1 being huge and 6 being small: <h1> <h2> <h3> <h4> <h5> <h6>
Paragraph – normal text that formats to a paragraph shape if lines of text run out of room. The paragraph tag looks like: <p>
Button – a button that you can click. You would have to write some other stuff to tell the webpage what to do when the button is pressed. The button tag looks like: <button>
Hyperlink – colloquially what we refer to as a link. It is a link to (usually) some other website or a different part of the same website – basically a link from one page to some other page. The link can be text, an image, or a button. The default is text. To make it an image or a button, you’d have to add a smidge of extra code to your link to make it display that instead of text. The hyperlink tag looks like: <a>
Div – division element. It is used both to logically separate chunks of code from a human readability standpoint as well as group code together so that you can move them around, use javascript on them, and style them more easily. The div tag looks like: <div>
Span – span element. It’s basically an inline <div>. You can be in the middle of some text within a paragraph <p> tag, isolate some words from the rest by putting <span>...</span> tags around them, and then do the same stuff to them that you can do with divs (move around, manipulate with javascript, style). The span tag looks like: <span>
Tables
-TH, TR, TD, thead, tbody
Forms
-They won’t do anything FOR NOW, this is all about looks
-action: where to send data. Not useful rn
-method: get vs. post. Our forms use post because it posts user data to database
Input
-text, username, password, submit, radio, checkbox, placeholder, etc
Labels: Label tag, label “for” matches input “id”
        -validations “Required”, change type to email 
Radio and checkbox: name lets you connect radio buttons so that you can only choose 1


    CSS basics:
Linking to HTML
When linking to stylesheets (especially during bootstrap example), emphasize that it is the equivalent of taking all that css code and plopping in into your <head> as if you wrote it yourself.
Colors
Borders
Backgrounds
Images


    Bootstrap 4 Basics:
